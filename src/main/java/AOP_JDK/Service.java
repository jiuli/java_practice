package AOP_JDK;
/*
 *  AOP的拦截功能是由java中的动态代理来实现的。
 *  说白了，就是在目标类的基础上增加切面逻辑.
 *  那么动态代理是如何实现将切面逻辑（advise）织入到目标类方法中去的呢？
 *  下面我们就来详细介绍并实现AOP中用到的两种动态代理。
        AOP的源码中用到了两种动态代理来实现拦截切入功能：
        jdk动态代理和cglib动态代理。两种方法同时存在，各有优劣。
        jdk动态代理是由java内部的反射机制来实现的，cglib动态代理底层则是
        借助asm来实现的。总的来说，反射机制在生成类的过程中比较高效，而asm在生成类之后的
        相关执行过程中比较高效（可以通过将asm生成的类进行缓存，这样解决asm生成类过程低效
        问题）。还有一点必须注意：jdk动态代理的应用前提，必须是目标类基于统一的接口。
        如果没有上述前提，jdk动态代理不能应用。由此可以看出，jdk动态代理有一定的局限性，
        cglib这种第三方类库实现的动态代理应用更加广泛，且在效率上更有优势。*/
public interface Service {
	/**
	 * 该类是所有被代理的接口类，jdk实现的代理要求被代理类基于同一的接口*/
	public void add();
	
	public void update();
}
